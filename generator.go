package main

import (
	"fmt"
	"go/build"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
)

// Generator ...
type Generator struct {
	Files []string
	Pkg   *build.Package
	Pool  map[string][]byte
}

// Destination ...
func (g *Generator) Destination() string {
	return filepath.Join(g.Pkg.Dir, fmt.Sprintf("%s_templated.go", g.Pkg.Name))
}

// Stack stacks contents of target files.
func (g *Generator) Stack() error {
	if g.Pool == nil {
		g.Pool = make(map[string][]byte)
	}
	for _, entry := range g.Files {
		if err := g.stack(entry); err != nil {
			return err
		}
	}
	return nil
}

// read
func (g *Generator) stack(entry string) error {
	info, err := os.Stat(entry)
	if err != nil {
		return err
	}
	if !info.IsDir() {
		f, err := os.Open(entry)
		if err != nil {
			return err
		}
		defer f.Close()
		b, err := ioutil.ReadAll(f)
		if err != nil {
			return err
		}
		g.Pool[entry] = b
	}
	matches, err := filepath.Glob(filepath.Join(entry, "*"))
	if err != nil {
		return err
	}
	for _, e := range matches {
		if err = g.stack(e); err != nil {
			return err
		}
	}
	return nil
}

// Flush write all stacked contents to destination template file.
func (g *Generator) Flush(w io.Writer) (err error) {
	_, err = fmt.Fprintf(w, "package %s\n\n// This file is autogenerated by tplize\n\n", g.Pkg.Name)

	return err
}
